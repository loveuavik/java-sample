pipeline {
    agent any
	def version() {
    def matcher = readFile('pom.xml') =~ '<version>(.+?)</version>'
    matcher ? matcher[0][1] : null
	}
    stages {
        stage('Build') {
            steps {
                sh label: '', script: 'mvn package'
            }
        }
        stage("SonarQube analysis") {
            agent any
            steps {
              withSonarQubeEnv('sonar') {
                script {
                sh 'mvn clean package sonar:sonar -Dsonar.host.url=http://${sonarurl}:9000'
              }
             }
            }
          }
          stage("Quality Gate") {
            steps {			  
              timeout(time: 1, unit: 'HOURS') {
                waitForQualityGate abortPipeline: true
              }
            }
          }
        stage('Deploy to Repo') {
            steps {
                sh label: '', script: 'mvn clean deploy'
            }
        }
		stage('Deploy to Server') {
			steps {
            sh label: '', script: ''${version}'' 'mvn dependency:get -DremoteRepositories=http://localhost:8081/repository/maven-snapshots/ -DgroupId=com.example -DartifactId=java-maven-junit-helloworld -Dversion=2.0-SNAPSHOT -Dtransitive=false  -Ddest=/app/'
            }
        }
    }
    post { 
        always { 
            cleanWs()
             }
        }
}
